import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import { CartService } from '../../services/cart.service';
import { Product } from '../../models/product.model';

interface CartItem {
  id: number;
  name: string;
  price: number;
  image: string;
  quantity?: number;
  total?: number;
}

interface MenuItem extends Omit<Product, 'available'> {
  available: boolean;
  originalPrice?: number;
  isNew?: boolean;
  isPopular?: boolean;
  rating?: number;
  preparationTime?: string;
  calories?: number;
  ingredients?: string[];
  discount?: number;
}

@Component({
  selector: 'app-menu',
  standalone: true,
  imports: [CommonModule, RouterModule],
  template: `
    <div class="container mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold text-center mb-8">قائمة الطعام</h1>
      
      <!-- Category Filter -->
      <div class="mb-8 flex justify-center gap-4 flex-wrap">
        <button 
          *ngFor="let category of categories"
          (click)="filterByCategory(category)"
          [class.bg-primary]="selectedCategory === category"
          [class.text-white]="selectedCategory === category"
          [class.bg-gray-100]="selectedCategory !== category"
          class="px-4 py-2 rounded-full text-sm font-medium transition-colors"
        >
          {{ category }}
        </button>
      </div>
      
      <!-- Products Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div 
          *ngFor="let item of filteredItems"
          class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow"
        >
          <img 
            [src]="item.image" 
            [alt]="item.name"
            class="w-full h-48 object-cover"
          />
          
          <div class="p-4">
            <div class="flex justify-between items-start mb-2">
              <h3 class="text-lg font-semibold">{{ item.name }}</h3>
              <div class="flex gap-2">
                <span *ngIf="item.isNew" class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">
                  جديد
                </span>
                <span *ngIf="item.isPopular" class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                  الأكثر طلباً
                </span>
              </div>
            </div>
            
            <p class="text-gray-600 text-sm mb-3">{{ item.description }}</p>
            
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-2">
                <span class="text-lg font-bold text-primary">
                  {{ item.discount && item.originalPrice ? getDiscountPrice(item.originalPrice, item.discount) : item.price }} ر.س
                </span>
                <span *ngIf="item.discount && item.originalPrice" class="text-sm text-gray-500 line-through">
                  {{ item.originalPrice }} ر.س
                </span>
                <span *ngIf="item.discount" class="text-sm text-red-500 bg-red-100 px-2 py-0.5 rounded-full">
                  خصم {{ item.discount }}%
                </span>
              </div>
              
              <button 
                (click)="addToCart(item)"
                [disabled]="isAddingToCart || !item.available"
                [class.opacity-50]="isAddingToCart || !item.available"
                class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary-dark transition-colors flex items-center gap-2"
              >
                <span *ngIf="isAddingToCart" class="inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></span>
                {{ isAddingToCart ? 'جاري الإضافة...' : 'أضف إلى السلة' }}
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Empty State -->
      <div *ngIf="filteredItems.length === 0" class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">لا توجد عناصر متاحة</h3>
        <p class="mt-1 text-gray-500">لا توجد عناصر متاحة في هذا القسم حالياً.</p>
      </div>
      
      <!-- Success Message -->
      <div *ngIf="showSuccessMessage" class="fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg flex items-center gap-2">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span>تمت الإضافة إلى السلة بنجاح!</span>
      </div>
    </div>
  `
})
      
      <!-- Products Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div 
          *ngFor="let item of filteredItems"
          class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow"
        >
          <img 
            [src]="item.image" 
            [alt]="item.name"
            class="w-full h-48 object-cover"
          />
          
          <div class="p-4">
            <div class="flex justify-between items-start mb-2">
              <h3 class="text-lg font-bold">{{ item.name }}</h3>
              <div class="text-lg font-bold text-primary">
                {{ item.discount ? (item.price * (1 - item.discount/100)).toFixed(2) : item.price }} ج.م
                <span *ngIf="item.discount" class="text-sm text-gray-500 line-through mr-1">
                  {{ item.price }} ج.م
                </span>
              </div>
            </div>
            
            <p class="text-gray-600 mb-4">{{ item.description }}</p>
            
            <div class="flex items-center justify-between text-sm text-gray-500 mb-4">
              <div class="flex items-center">
                <svg class="w-4 h-4 text-yellow-400 ml-1" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                </svg>
                <span>{{ item.rating || '4.5' }}</span>
              </div>
              <span>{{ item.preparationTime || '20-30 دقيقة' }}</span>
              <span>{{ item.calories || '650' }} سعر حراري</span>
            </div>
            
            <button 
              (click)="addToCart(item)"
              [disabled]="isAddingToCart"
              [class.opacity-50]="isAddingToCart"
              class="w-full bg-primary text-white py-2 rounded-lg hover:bg-primary-dark transition-all duration-200 flex items-center justify-center gap-2"
            >
              <span *ngIf="!isAddingToCart">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
              </span>
              <span *ngIf="isAddingToCart">
                <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
              <span>{{ isAddingToCart ? 'يتم الإضافة...' : 'أضف إلى السلة' }}</span>
            </button>
          </div>
        </div>
      </div>
      
      <!-- Success Message -->
      <div *ngIf="showSuccessMessage" class="fixed bottom-4 left-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg">
        تمت إضافة المنتج إلى السلة بنجاح!
      </div>
    </div>
  `,
  styles: []
})
export class MenuComponent {
  private cartService = inject(CartService);
  private router = inject(Router);
  
  isAddingToCart = false;
  showSuccessMessage = false;
  selectedCategory = 'الكل';
  
  categories = ['الكل', 'مشويات', 'ساندويتشات', 'سلطات', 'مشروبات'];

  // Get filtered items based on selected category
  get filteredItems() {
    if (this.selectedCategory === 'الكل') {
      return this.menuItems;
    }
    return this.menuItems.filter(item => item.category === this.selectedCategory);
  }

  constructor() {
    // Initialize with some sample data if needed
  }

  // Filter items by category
  filterByCategory(category: string) {
    this.selectedCategory = category;
  }

  // Add item to cart
  async addToCart(product: Product) {
    if (this.isAddingToCart) return;
    
    this.isAddingToCart = true;
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Add to cart
      this.cartService.addItem({
        id: product.id,
        name: product.name,
        price: product.price,
        image: product.image || ''
      });
      
      // Show success message
      this.showSuccessMessage = true;
      setTimeout(() => {
        this.showSuccessMessage = false;
      }, 2000);
      
      // Navigate to cart after a short delay
      setTimeout(() => {
        this.router.navigate(['/cart']);
      }, 1000);
      
    } catch (error) {
      console.error('Error adding to cart:', error);
      // You can show an error message here if needed
    } finally {
      this.isAddingToCart = false;
    }
  }

  // Sample menu items
  menuItems: Product[] = [
    {
      id: 1,
      name: 'شيش طاووق مشوي',
      description: 'قطع دجاج مشوية على الفحم مع الأرز والصلصة',
      price: 120,
      originalPrice: 140,
      image: 'assets/offers/WhatsApp Image 2025-08-11 at 12.06.14 PM (1).jpeg',
      category: 'مشويات',
      isNew: true,
      isPopular: true,
      available: true,
      rating: 4.8,
      preparationTime: '20-25 دقيقة',
      calories: 650,
      ingredients: ['دجاج', 'بهارات', 'ثوم', 'ليمون'],
      discount: 15
    },
    {
      id: 2,
      name: 'كباب حلة',
      description: 'لحم ضأن مشوي مع الأرز والسلطة',
      price: 135,
      originalPrice: 150,
      image: 'assets/offers/WhatsApp Image 2025-08-11 at 12.06.14 PM (2).jpeg',
      category: 'مشويات',
      isPopular: true,
      discount: 10,
      available: true,
      rating: 4.9,
      preparationTime: '25-30 دقيقة',
      calories: 780,
      ingredients: ['لحم ضأن', 'بصل', 'بهارات مشكلة', 'طماطم']
    },
    {
      id: 3,
      name: 'شاورما دجاج',
      description: 'شاورما دجاج مع الثومية والخضار',
      price: 80,
      image: 'assets/offers/WhatsApp Image 2025-08-11 at 12.06.14 PM (3).jpeg',
      category: 'ساندويتشات',
      isNew: true,
      available: true,
      rating: 4.7,
      preparationTime: '15-20 دقيقة',
      calories: 520,
      ingredients: ['صدر دجاج', 'ثومية', 'خس', 'طماطم', 'خيار']
    },
    {
      id: 4,
      name: 'برجر لحم',
      description: 'برجر لحم مشوي مع الجبن والخضار',
      price: 90,
      originalPrice: 100,
      image: 'assets/offers/WhatsApp Image 2025-08-11 at 12.06.14 PM (5).jpeg',
      category: 'ساندويتشات',
      discount: 10,
      available: true,
      rating: 4.6,
      preparationTime: '15-20 دقيقة',
      calories: 680,
      ingredients: ['لحم بقري', 'جبنة شيدر', 'خس', 'طماطم', 'بصل']
    },
    {
      id: 5,
      name: 'سلطة سيزر',
      description: 'خس، كرنب، جبنة بارميزان، كروتون، صوص سيزر',
      price: 65,
      image: 'assets/offers/WhatsApp Image 2025-08-11 at 12.06.14 PM (1).jpeg',
      category: 'سلطات',
      isNew: true,
      available: true,
      rating: 4.5,
      preparationTime: '10-15 دقيقة',
      calories: 320,
      ingredients: ['خس', 'كرنب', 'جبنة بارميزان', 'كروتون', 'صوص سيزر']
    },
    {
      id: 6,
      name: 'مشروب ليمون بالنعناع',
      description: 'ليمون طازج مع أوراق النعناع',
      price: 25,
      image: 'assets/offers/WhatsApp Image 2025-08-11 at 12.06.14 PM (2).jpeg',
      category: 'مشروبات',
      available: true,
      rating: 4.8,
      preparationTime: '5 دقائق',
      calories: 120,
      ingredients: ['ليمون', 'نعناع طازج', 'سكر', 'ماء مثلج']
    }
  ];

  // Get filtered items based on selected category
  // Get filtered items based on selected category
  get filteredItems() {
    if (this.selectedCategory === 'الكل') {
      return this.menuItems;
    }
    return this.menuItems.filter(item => item.category === this.selectedCategory);
  }

  // Calculate discounted price
  getDiscountPrice(price: number, discount: number): number {
    return Math.round(price * (1 - discount / 100));
  }

  // Filter items by category
  filterByCategory(category: string) {
    this.selectedCategory = category;
  }

  // Add item to cart with loading state and success feedback
  async addToCart(product: MenuItem) {
    if (this.isAddingToCart) return;
    
    this.isAddingToCart = true;
    
    try {
      // Calculate final price (with discount if available)
      const price = product.discount && product.originalPrice
        ? this.getDiscountPrice(product.originalPrice, product.discount)
        : product.price;
      
      // Create cart item (quantity and total will be set by the service)
      this.cartService.addToCart({
        id: product.id,
        name: product.name,
        price: price,
        image: product.image
      });
      
      // Show success message
      this.showSuccessMessage = true;
      setTimeout(() => {
        this.showSuccessMessage = false;
      }, 2000);
      
      // Navigate to cart after a short delay
      setTimeout(() => {
        this.router.navigate(['/cart']);
      }, 1000);
      
    } catch (error) {
      console.error('Error adding to cart:', error);
      // You could show an error message to the user here
    } finally {
      this.isAddingToCart = false;
    }
  }
}
